{"version":3,"sources":["components/AppHeader/AppHeader.tsx","components/Footer/Footer.tsx","components/AppIntroduction/AppIntroduction.tsx","context/wpmContext.tsx","helpers/index.ts","components/TextBox/TextBox.tsx","components/TextFormat/TextFormat.tsx","components/Timer/Timer.tsx","container/ReadContainer/ReadContainer.tsx","components/ReadMeasurementTable/ReadMeasurementTable.tsx","components/ResultDisplay/ResultDisplay.tsx","components/ComprehensionText/ComprehensionText.tsx","container/StatisticsContainer/StatisticsContainer.tsx","components/AdblockDetect/AdblockDetect.tsx","components/VerticalBannerAds/VerticalBannerAds.tsx","components/SquareBannerAd/SquareBannerAd.tsx","App.tsx","index.tsx"],"names":["AppHeader","className","type","to","Footer","style","textAlign","href","AppIntroduction","wpmContextDefaultValue","wpm","setWpm","wpmContext","React","createContext","ROOT","availableTopics","random","api","article","availableFontFamily","TextArea","Input","TextBox","fontStyle","toggleFullScreen","readingMode","props","value","size","onClick","toggleReadingMode","placeholder","onChange","target","onTextContentChange","title","icon","FullscreenOutlined","color","backgroundColor","Option","Select","TextFormat","defaultValue","defaultFontFamily","setFontFamily","map","family","S","humanize","s","min","max","defaultSize","setFontSize","defaultTopic","val","setTopic","Object","keys","topic","setIsBold","BoldOutlined","Timer","useState","minutes","setMinutes","seconds","setSeconds","counter","setCounter","timeIncrease","secondCounter","minuteCounter","Math","floor","computedSecond","String","length","computedMinute","useEffect","calculateWpm","interval","setTimeout","clearInterval","INITIAL_TEXT_FORMAT","fontFamily","fontWeight","fontSize","ReadContainer","useContext","history","useHistory","textContent","setTextContent","textFormat","setTextFormat","textBoxRef","useRef","setReadingMode","document","fullscreenEnabled","fullscreenElement","exitFullscreen","current","requestFullscreen","message","error","getTextContent","a","trim","split","url","axios","get","response","data","body","randomArticle","content","Helmet","name","setIsFullScreen","ref","push","ReadMeasurementTable","pagination","columns","dataIndex","dataSource","key","paper","screen","character","profile","bordered","ResultDisplay","hoverable","cover","alt","src","display","float","readAgain","percent","betterThan","Typography","Title","ComprehensionText","StatisticsContainer","switchImage","replace","AdblockDetect","adblockDetected","setAdblock","checkAdblock","checkAdBlocker","console","log","visible","footer","StopOutlined","tryRequest","fetch","Request","method","mode","then","isBlocked","catch","e","Error","undefined","Ads","window","adsbygoogle","data-ad-client","data-ad-slot","data-ad-format","data-full-width-responsive","data-adtest","AppBody","flex","minHeight","children","App","ReactGA","initialize","pageview","location","pathname","search","Provider","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bb08b9e6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Button } from \"antd\";\n\nimport \"./AppHeader.scss\";\nimport { Link } from \"react-router-dom\";\n\nconst AppHeader = () => {\n  return (\n    <div className=\"header-container\">\n      <div className=\"app-logo\">\n        <Button className=\"button\" type=\"link\">\n          <h2>\n            <Link to=\"/\">App Logo</Link>\n          </h2>\n        </Button>\n      </div>\n      <div>\n        <Button className=\"button\" type=\"link\">\n          <h2>\n            <Link to=\"/\">Home</Link>\n          </h2>\n        </Button>\n        <Button className=\"button\" type=\"link\">\n          <h2>\n            <Link to=\"/stats\">Statistics</Link>\n          </h2>\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport \"./Footer.scss\";\n\nexport default function Footer() {\n  return (\n    <Layout.Footer className=\"footer-container\" style={{ textAlign: \"center\" }}>\n      <span>\n        <a href=\"https://readingspeedtest.tech\">Reading Speed Test </a>\n        Software Copyright ©2020, All Rights Reserved. Click\n      </span>\n      <a href=\"mailto:sumukha214@gmail.com?subject=Feedback on Speed read test software\">\n        here\n      </a>\n      <span>to Feedback</span>\n    </Layout.Footer>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport \"./AppIntroduction.scss\";\n\nexport default function AppIntroduction() {\n  return (\n    <div className=\"app-intro-container\">\n      <h1>Pick up a topic and check your Reading Speed for free.</h1>\n      <p className=\"intro-p\">\n        Speed reading is the process of rapidly absorbing the meaning of a\n        sentence, rather than identifying individual words. Reading Speed became\n        so much important to gain knowledge in the current world. You will have\n        an advantage over others to gain contextual knowledge with less time\n        than others.\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport interface wpmContextData {\n  wpm: number;\n  setWpm: (arg: number) => void;\n}\n\nexport const wpmContextDefaultValue: wpmContextData = {\n  wpm: 0,\n  setWpm: (arg: number = 0) => null,\n};\n\nconst wpmContext = React.createContext<wpmContextData>(wpmContextDefaultValue);\n\nexport default wpmContext;\n","export const ROOT: string = \"https://sumukhah.github.io/speed-read-json/\";\n\ninterface topics {\n  [key: string]: {\n    api: string;\n    api_key?: string | null;\n  };\n}\n\nexport const availableTopics: topics = {\n  random: { api: ROOT + \"random.json\" },\n  article: { api: ROOT + \"articles.json\" },\n};\n\nexport const availableFontFamily: string[] = [\n  \"arial\",\n  \"times new roman\",\n  \"geneva\",\n  \"verdana\",\n];\n","import React from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport { FullscreenOutlined } from \"@ant-design/icons\";\nimport { textStyle } from \"../../helpers/types\";\nimport \"./TextBox.scss\";\n\nconst { TextArea } = Input;\n\ninterface TextBoxProps {\n  fontStyle: textStyle;\n  toggleFullScreen: () => void;\n  toggleReadingMode: () => void;\n  onTextContentChange: (content: string) => void;\n  value: string;\n  readingMode: boolean;\n}\n\nconst TextBox: React.FC<TextBoxProps> = ({\n  fontStyle,\n  toggleFullScreen,\n  readingMode,\n  ...props\n}) => {\n  return (\n    <div className=\"text-box\">\n      {!readingMode ? (\n        <TextArea\n          placeholder=\"Add your own Text or select a Topic and press Start\"\n          style={fontStyle}\n          onChange={({ target: { value } }) => props.onTextContentChange(value)}\n          value={props.value}\n        />\n      ) : (\n        <div style={fontStyle} className=\"textContainerBox\">\n          <p>{props.value}</p>\n          <Button\n            type=\"primary\"\n            className=\"read-toggle-button\"\n            size=\"large\"\n            onClick={props.toggleReadingMode}\n          >\n            Done\n          </Button>\n        </div>\n      )}\n      {!readingMode && (\n        <Button\n          type=\"primary\"\n          className=\"read-toggle-button start-button\"\n          size=\"large\"\n          onClick={props.toggleReadingMode}\n        >\n          Start Test\n        </Button>\n      )}\n      <Tooltip title=\"Full Screen\" className=\"fullscreen-toggle-button\">\n        <Button\n          type=\"text\"\n          icon={<FullscreenOutlined color=\"black\" />}\n          onClick={toggleFullScreen}\n          style={{ backgroundColor: \"white\" }}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default TextBox;\n","import React from \"react\";\nimport { Select, Tooltip, Button, InputNumber } from \"antd\";\nimport { BoldOutlined } from \"@ant-design/icons\";\nimport { availableTopics, availableFontFamily } from \"../../helpers\";\nimport S from \"string\";\n\nimport \"./TextFormat.scss\";\nconst { Option } = Select;\n\ninterface TextFormatProps {\n  setFontFamily: (font: string) => void;\n  setFontSize: (size: number) => void;\n  setTopic: (topic: string) => void;\n  setIsBold: () => void;\n  setIsFullScreen: () => void;\n  defaultTopic: string;\n  defaultSize: number;\n  defaultFontFamily: string;\n}\n\nconst TextFormat: React.FC<TextFormatProps> = (props) => {\n  return (\n    <div className=\"text-format-form\">\n      <div>\n        <Select\n          defaultValue={props.defaultFontFamily}\n          className=\"font-select-dropdown\"\n          onChange={(value) => props.setFontFamily(value)}\n        >\n          {availableFontFamily.map((family) => {\n            return (\n              <Option value={family} key={family}>\n                {S(family).humanize().s}\n              </Option>\n            );\n          })}\n        </Select>\n        <InputNumber\n          min={10}\n          max={30}\n          defaultValue={props.defaultSize}\n          className=\"font-size\"\n          onChange={(value) => {\n            props.setFontSize(value as number);\n          }}\n        />\n        <Select\n          defaultValue={props.defaultTopic}\n          className=\"topic-select-dropdown\"\n          onChange={(val) => props.setTopic(val)}\n        >\n          {Object.keys(availableTopics).map((topic) => {\n            return (\n              <Option value={topic} key={topic}>\n                {S(topic).humanize().s}\n              </Option>\n            );\n          })}\n          {/* <Option value=\"Random\">Random</Option>\n          <Option value=\"Articles\">Articles</Option>\n          <Option value=\"News\">News</Option>\n          <Option value=\"Technology\">Technology</Option>\n          <Option value=\"Sports\">Sports</Option>\n          <Option value=\"Bible\">Bible</Option>\n          <Option value=\"Quran\">Quran</Option>\n          <Option value=\"Geetha\">Bhagavath Geetha</Option> */}\n        </Select>\n      </div>\n      <div>\n        <Tooltip title=\"Bold\">\n          <Button\n            onClick={props.setIsBold}\n            // style={{ fontWeight: \"bold\" }}\n            icon={<BoldOutlined />}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default TextFormat;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Timer.scss\";\n\ninterface Props {\n  calculateWpm: (arg: number) => void;\n  readingMode: boolean;\n}\n\nexport default function Timer(props: Props) {\n  const [minutes, setMinutes] = useState<string>(\"00\");\n  const [seconds, setSeconds] = useState<string>(\"00\");\n  const [counter, setCounter] = useState(0);\n\n  const timeIncrease = (): void => {\n    const secondCounter = counter % 60;\n    const minuteCounter = Math.floor(counter / 60);\n\n    const computedSecond =\n      String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\n    const computedMinute =\n      String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\n\n    setSeconds(computedSecond as string);\n    setMinutes(computedMinute as string);\n    setCounter((counter) => counter + 1);\n  };\n\n  useEffect(() => {\n    if (!props.readingMode && counter > 1) {\n      // there is a small lag of 1 second at start.\n      // to make it correct, pass +1 second to the context.\n      props.calculateWpm(counter + 1);\n      setCounter(0);\n    }\n  }, [props.readingMode, counter]);\n\n  useEffect(() => {\n    const interval = props.readingMode ? setTimeout(timeIncrease, 1000) : null;\n    return () => {\n      !!interval && clearInterval(interval);\n    };\n  }, [counter, props.readingMode]);\n\n  if (counter === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"timer-container\">\n      <span>\n        {minutes}:{seconds}\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useRef, useContext } from \"react\";\nimport { message } from \"antd\";\nimport axios from \"axios\";\nimport wpmContext from \"../../context/wpmContext\";\nimport { availableTopics } from \"../../helpers/index\";\nimport { useHistory } from \"react-router-dom\";\nimport Helmet from \"react-helmet\";\n\nimport \"./ReadContainer.scss\";\nimport { textStyle } from \"../../helpers/types\";\nimport TextBox from \"../../components/TextBox/TextBox\";\nimport TextFormat from \"../../components/TextFormat/TextFormat\";\nimport Timer from \"../../components/Timer/Timer\";\n\nconst INITIAL_TEXT_FORMAT: textStyle = {\n  fontFamily: \"arial\",\n  fontWeight: \"normal\",\n  fontSize: 15,\n};\n\nexport default function ReadContainer() {\n  const { setWpm } = useContext(wpmContext);\n  const history = useHistory();\n  const [topic, setTopic] = useState<string>(\"random\");\n  const [textContent, setTextContent] = useState<string>(\"\");\n  const [textFormat, setTextFormat] = useState<textStyle>(INITIAL_TEXT_FORMAT);\n  const textBoxRef = useRef<HTMLDivElement | null>(null);\n  const [readingMode, setReadingMode] = useState<boolean>(false);\n\n  const toggleFullScreen = (): void => {\n    if (document.fullscreenEnabled) {\n      if (!document.fullscreenElement) {\n        textBoxRef.current?.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    } else {\n      message.error(\"Full screen mode is not supported in this browser\");\n    }\n  };\n\n  const toggleFontWeight = (): void => {\n    setTextFormat({\n      ...textFormat,\n      fontWeight: textFormat.fontWeight === \"normal\" ? \"bold\" : \"normal\",\n    });\n  };\n\n  const setFontFamily = (family: string): void => {\n    setTextFormat({ ...textFormat, fontFamily: family });\n  };\n\n  const setFontSize = (size: number): void => {\n    setTextFormat({ ...textFormat, fontSize: size });\n  };\n\n  const getTextContent = async () => {\n    if (textContent.trim().length > 0) {\n      if (textContent.split(\" \").length < 60) {\n        message.error(\"You must insert at least 60 words\");\n        return;\n      }\n      setReadingMode(true);\n    } else {\n      const url = availableTopics[topic];\n      try {\n        const response = await axios.get(url.api);\n        const data = response.data.body;\n        const randomArticle: string =\n          data[Math.floor(Math.random() * data.length)].content;\n        setTextContent(randomArticle);\n        setReadingMode(true);\n      } catch (e) {\n        message.error(e.message);\n      }\n    }\n  };\n\n  const toggleReadingMode = () => {\n    if (!readingMode) {\n      getTextContent();\n    } else {\n      setReadingMode((readingMode) => !readingMode);\n    }\n    // setReadingMode(!readingMode);\n  };\n\n  const onTextContentChange = (value: string): void => {\n    setTextContent(value);\n  };\n\n  const calculateWpm = (seconds: number): void => {\n    const words: number = textContent.split(\" \").length;\n    const wpm: number = (60 * words) / seconds;\n    setWpm(Math.floor(wpm));\n    history.push(\"/stats\");\n  };\n\n  return (\n    <div className=\"read-box-container\">\n      <Helmet>\n        <title>Test your reading speed</title>\n        <meta\n          name=\"description\"\n          content=\"Free online tool to check your reading ability. Reading speed is\n          proportional to Comprehension at certain level. Check speed reading\n          wpm.Check your average reading speed.\"\n        />\n      </Helmet>\n      <TextFormat\n        setFontSize={setFontSize}\n        setFontFamily={setFontFamily}\n        setIsBold={toggleFontWeight}\n        setTopic={setTopic}\n        setIsFullScreen={toggleFullScreen}\n        defaultTopic={topic}\n        defaultSize={textFormat.fontSize}\n        defaultFontFamily={textFormat.fontFamily}\n      />\n      <div ref={textBoxRef} className=\"text-box-ref\">\n        <TextBox\n          fontStyle={textFormat}\n          toggleFullScreen={toggleFullScreen}\n          toggleReadingMode={toggleReadingMode}\n          onTextContentChange={onTextContentChange}\n          value={textContent}\n          readingMode={readingMode}\n        />\n        <Timer calculateWpm={calculateWpm} readingMode={readingMode} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Table, Tag } from \"antd\";\n\nexport default function ReadMeasurementTable() {\n  const columns = [\n    {\n      title: \"Screen\",\n      dataIndex: \"screen\",\n    },\n    {\n      title: \"Paper\",\n      dataIndex: \"paper\",\n    },\n    {\n      title: \"Character\",\n      dataIndex: \"character\",\n    },\n    {\n      title: \"Profile\",\n      dataIndex: \"profile\",\n    },\n  ];\n  const data = [\n    {\n      key: \"1\",\n      paper: 120,\n      screen: 100,\n      character: \"The Sloth\",\n      profile: \"Slow reader\",\n    },\n    {\n      key: \"2\",\n      paper: 250,\n      screen: 200,\n      character: \"The Fox\",\n      profile: \"Average reader\",\n    },\n    {\n      key: \"3\",\n      paper: 500,\n      screen: 400,\n      character: \"The Lion\",\n      profile: \"Speed reader\",\n    },\n    {\n      key: \"4\",\n      paper: 700,\n      screen: 600,\n      character: \"The Cheetah\",\n      profile: \"The Expert\",\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        // rowSelection={{\n        //   type: selectionType,\n        //   ...rowSelection,\n        // }}\n        pagination={false}\n        columns={columns}\n        dataSource={data}\n        bordered\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Card, Divider, Button } from \"antd\";\nimport { ROOT } from \"../../helpers/index\";\nimport { Progress } from \"antd\";\nimport S from \"string\";\n\nimport \"./ResultDisplay.scss\";\n\ninterface Props {\n  character: string;\n  wpm: number;\n  betterThan: number;\n  readAgain: () => void;\n}\n\nexport default function ResultDisplay(props: Props) {\n  return (\n    <div className=\"result-display-container\">\n      <Card\n        hoverable\n        cover={\n          <img\n            // style={{ width: 200 }}\n            alt=\"example\"\n            src={`${ROOT}/images/` + props.character + `.gif`}\n          />\n        }\n        className=\"result-card\"\n      >\n        <div style={{ display: \"inline\", float: \"left\" }}>\n          <h3>Your speed is</h3>\n          <h1>{props.wpm} WPM</h1>\n        </div>\n\n        <div style={{ display: \"inline\", float: \"right\" }}>\n          <h3>You are a</h3>\n          <h2>{S(props.character).humanize().s}</h2>\n        </div>\n        <Divider />\n        <Button\n          onClick={props.readAgain}\n          type=\"primary\"\n          className=\"read-again-button\"\n        >\n          Read again\n        </Button>\n      </Card>\n      <div className=\"progress-display\">\n        <Progress percent={20} type=\"circle\" />\n        <h3>You are better than {props.betterThan}% of our readers</h3>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\nimport \"./ComprehensionText.scss\";\nimport { Link } from \"react-router-dom\";\nconst { Title } = Typography;\n\nexport default function ComprehensionText() {\n  return (\n    <div className=\"app-intro-container\">\n      <h1>Reading Speed and Comprehension are proportional</h1>\n      <p>\n        <a href=\"https://readingspeedtest.tech\">Speed reading</a> will help you\n        to improve your comprehension up to a point. By improving your reading\n        speed, you will spend less time in sub-vocalization. If you master\n        visualization while reading, you can dramatically improve reading speed\n        and can become an expert.\n      </p>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport Helmet from \"react-helmet\";\nimport \"./StatisticsContainer.scss\";\nimport ReadMeasurementTable from \"../../components/ReadMeasurementTable/ReadMeasurementTable\";\nimport ResultDisplay from \"../../components/ResultDisplay/ResultDisplay\";\nimport wpmContext from \"../../context/wpmContext\";\nimport ComprehensionText from \"../../components/ComprehensionText/ComprehensionText\";\nimport { useHistory } from \"react-router-dom\";\n\nconst switchImage = (wpm: number) => {\n  switch (true) {\n    case wpm <= 120:\n      return { character: \"sloth\", betterThan: 0 };\n    case wpm > 120 && wpm < 250:\n      return { character: \"fox\", betterThan: 20 };\n    case wpm > 250 && wpm < 500:\n      return { character: \"lion\", betterThan: 50 };\n    case wpm > 500:\n      return { character: \"cheetah\", betterThan: 80 };\n    default:\n      return { character: \"fox\", betterThan: 20 };\n  }\n};\n\nexport default function StatisticsContainer() {\n  const { wpm } = useContext(wpmContext);\n  const { character, betterThan } = switchImage(wpm);\n  const history = useHistory();\n\n  const onPressChallengeAgain = () => {\n    history.replace(\"/\");\n  };\n  return (\n    <div className=\"statistics-container\">\n      <Helmet>\n        <title>Speed Reading Test and Reading Comprehension Test</title>\n        <meta\n          name=\"description\"\n          content=\"Free speed reading online test.Check your reading speed and test your\n          Comprehension.Check your average reading speed. learn to speed read\n          .The average wpm is 150 to 200 wpm.reading wpm test.words per minute\n          reading test.reading wpm test.Check your average reading speed.train\n          yourself with speed reading exercises\"\n        />\n      </Helmet>\n      <div>\n        {wpm > 10 && (\n          <ResultDisplay\n            character={character}\n            wpm={wpm}\n            betterThan={betterThan}\n            readAgain={onPressChallengeAgain}\n          />\n        )}\n      </div>\n      <ReadMeasurementTable />\n      <ComprehensionText />\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { StopOutlined } from \"@ant-design/icons\";\n\nexport default function AdblockDetect() {\n  const [adblockDetected, setAdblock] = useState(false);\n  const checkAdblock = async () => {\n    try {\n      const response = await checkAdBlocker();\n      setAdblock(!!response);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    checkAdblock();\n  }, []);\n\n  if (adblockDetected) {\n    return (\n      <Modal\n        title=\"Disable Ad blocker\"\n        visible={adblockDetected}\n        footer={[<Button onClick={checkAdblock}>Refresh</Button>]}\n      >\n        <p>\n          Please consider helping us financially to continue providing this\n          software for free by disabling the adblock.\n        </p>\n        <span>\n          <Button\n            icon={<StopOutlined style={{ color: \"red\" }} />}\n            type=\"text\"\n          />\n          Disable the <b>adblock</b> and hit <b>refresh</b>\n        </span>\n      </Modal>\n    );\n  }\n  return <p></p>;\n}\n\n// Determines if the user is likely using an ad block extension\n\nasync function checkAdBlocker() {\n  let isBlocked;\n  async function tryRequest() {\n    try {\n      return fetch(\n        new Request(\n          \"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\",\n          {\n            method: \"HEAD\",\n            mode: \"no-cors\",\n          }\n        )\n      )\n        .then(function (response) {\n          // Google Ads request succeeded, so likely no ad blocker\n          isBlocked = false;\n          return isBlocked;\n        })\n        .catch(function (e) {\n          // Request failed, likely due to ad blocker\n          isBlocked = true;\n          return isBlocked;\n        });\n    } catch (error) {\n      isBlocked = true;\n      throw new Error(\"Blocked\");\n    }\n  }\n\n  return isBlocked !== undefined ? isBlocked : await tryRequest();\n}\n","import React, { useEffect } from \"react\";\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default function Ads() {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({});\n  }, []);\n\n  return (\n    <div className=\"ads\">\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: \"block\" }}\n        data-ad-client=\"ca-pub-2722285596392235\"\n        data-ad-slot=\"7149145943\"\n        data-ad-format=\"auto\"\n        data-full-width-responsive=\"true\"\n        // data-adtest=\"on\"\n      ></ins>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default function Ads() {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({});\n  }, []);\n\n  return (\n    <ins\n      className=\"adsbygoogle\"\n      style={{ display: \"block\" }}\n      data-ad-client=\"ca-pub-2722285596392235\"\n      data-ad-slot=\"4706815431\"\n      data-ad-format=\"auto\"\n      data-full-width-responsive=\"true\"\n      data-adtest=\"on\"\n    ></ins>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Row, Col } from \"antd\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport AppHeader from \"./components/AppHeader/AppHeader\";\nimport Footer from \"./components/Footer/Footer\";\nimport AppIntro from \"./components/AppIntroduction/AppIntroduction\";\nimport ReadContainer from \"./container/ReadContainer/ReadContainer\";\nimport StatisticsContainer from \"./container/StatisticsContainer/StatisticsContainer\";\nimport wpmContext from \"./context/wpmContext\";\nimport AdblockDetect from \"./components/AdblockDetect/AdblockDetect\";\nimport VerticalBannerAd from \"./components/VerticalBannerAds/VerticalBannerAds\";\nimport SquareBannerAd from \"./components/SquareBannerAd/SquareBannerAd\";\nimport \"./App.scss\";\nimport ReactGA from \"react-ga\";\n\nfunction App() {\n  const [wpm, setWpm] = useState<number>(0);\n  useEffect(() => {\n    ReactGA.initialize(\"UA-186125804-1\");\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []);\n\n  return (\n    <Router>\n      <AppHeader />\n      <AdblockDetect />\n      <wpmContext.Provider value={{ wpm, setWpm }}>\n        <Switch>\n          <Route path=\"/stats\">\n            <AppBody>\n              <StatisticsContainer />\n            </AppBody>\n          </Route>\n          <Route path=\"/\">\n            <AppBody>\n              <AppIntro />\n              <ReadContainer />\n            </AppBody>\n          </Route>\n        </Switch>\n      </wpmContext.Provider>\n      <Footer />\n    </Router>\n  );\n}\n\nconst AppBody = (props: { children: JSX.Element[] | JSX.Element }) => {\n  return (\n    <div className=\"App\">\n      <Row className=\"app-body\">\n        <Col flex={2} style={{ minHeight: \"90vh\" }}>\n          <SquareBannerAd />\n        </Col>\n        <Col flex=\"5 500px\" style={{ minHeight: \"90vh\" }}>\n          {props.children}\n        </Col>\n        <Col flex={2} style={{ minHeight: \"90vh\" }}>\n          <VerticalBannerAd />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}