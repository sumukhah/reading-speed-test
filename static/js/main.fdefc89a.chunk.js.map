{"version":3,"sources":["components/AppHeader/AppHeader.tsx","components/Footer/Footer.tsx","components/AppIntroduction/AppIntroduction.tsx","context/wpmContext.tsx","helpers/index.ts","components/TextBox/TextBox.tsx","components/TextFormat/TextFormat.tsx","components/Timer/Timer.tsx","container/ReadContainer/ReadContainer.tsx","components/ReadMeasurementTable/ReadMeasurementTable.tsx","components/ResultDisplay/ResultDisplay.tsx","components/ComprehensionText/ComprehensionText.tsx","container/StatisticsContainer/StatisticsContainer.tsx","components/AdblockDetect/AdblockDetect.tsx","components/VerticalBannerAds/VerticalBannerAds.tsx","components/SquareBannerAd/SquareBannerAd.tsx","components/AppIntroTextBottom/AppIntroTextBottom.tsx","App.tsx","index.tsx"],"names":["AppHeader","className","to","Footer","style","textAlign","href","AppIntroduction","Helmet","name","content","wpmContextDefaultValue","wpm","setWpm","wpmContext","React","createContext","ROOT","availableTopics","random","api","article","biography","story","availableFontFamily","TextArea","Input","TextBox","fontStyle","toggleFullScreen","readingMode","props","value","type","size","onClick","toggleReadingMode","placeholder","onChange","target","onTextContentChange","title","icon","FullscreenOutlined","color","backgroundColor","Option","Select","TextFormat","defaultValue","defaultFontFamily","setFontFamily","map","family","S","humanize","s","min","max","defaultSize","setFontSize","defaultTopic","val","setTopic","Object","keys","topic","setIsBold","BoldOutlined","Timer","useState","minutes","setMinutes","seconds","setSeconds","counter","setCounter","timeIncrease","secondCounter","minuteCounter","Math","floor","computedSecond","String","length","computedMinute","useEffect","calculateWpm","interval","setTimeout","clearInterval","INITIAL_TEXT_FORMAT","fontFamily","fontWeight","fontSize","ReadContainer","useContext","history","useHistory","textContent","setTextContent","textFormat","setTextFormat","textBoxRef","useRef","setReadingMode","document","fullscreenEnabled","fullscreenElement","exitFullscreen","current","requestFullscreen","message","error","getTextContent","a","trim","split","url","axios","get","response","data","body","randomArticle","setIsFullScreen","ref","push","ReadMeasurementTable","pagination","columns","dataIndex","dataSource","key","paper","screen","character","profile","bordered","ResultDisplay","hoverable","cover","alt","src","display","float","readAgain","percent","betterThan","ComprehensionText","StatisticsContainer","switchImage","replace","AdblockDetect","adblockDetected","setAdblock","checkAdblock","checkAdBlocker","console","log","visible","footer","StopOutlined","tryRequest","fetch","Request","method","mode","then","isBlocked","catch","e","Error","undefined","Ads","window","adsbygoogle","data-ad-client","data-ad-slot","data-ad-format","data-full-width-responsive","data-adtest","AppIntroTextBottom","AppBody","flex","minHeight","children","App","ReactGA","initialize","pageview","location","pathname","search","Provider","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fdefc89a.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./AppHeader.scss\";\nimport { Link } from \"react-router-dom\";\n\nconst AppHeader = () => {\n  return (\n    <div className=\"header-container\">\n      <div className=\"app-logo\">\n        <Link to=\"/\">Reading speed test</Link>\n      </div>\n      <div className=\"navs-href\">\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/stats\">Statistics</Link>\n        {/* <Link to=\"/guide\">Guide</Link> */}\n      </div>\n    </div>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport { Layout } from \"antd\";\nimport \"./Footer.scss\";\n\nexport default function Footer() {\n  return (\n    <Layout.Footer className=\"footer-container\" style={{ textAlign: \"center\" }}>\n      {/* <img\n        src={process.env.PUBLIC_URL + \"/icon.png\"}\n        alt=\"reading-speed-icon\"\n        style={{ width: \"50px\" }}\n      /> */}\n      <span>\n        <a href=\"https://readingspeedtest.tech\">Reading Speed Test </a>\n        Software Copyright ©2020, All Rights Reserved.\n      </span>\n      {/* <a href=\"mailto:sumukha214@gmail.com?subject=Feedback on Speed read test software\">\n        here\n      </a> */}\n      {/* <span>&nbsp;to Feedback</span> */}\n    </Layout.Footer>\n  );\n}\n","import React from \"react\";\nimport \"./AppIntroduction.scss\";\nimport Helmet from \"react-helmet\";\nimport { Link } from \"react-router-dom\";\n\nexport default function AppIntroduction() {\n  return (\n    <div className=\"app-intro-container\">\n      <h1>Test your reading speed online.</h1>\n      <p className=\"intro-p\">\n        You can test your speed reading ability at{\" \"}\n        <Link to=\"/\">ReadingSpeedTest,</Link> And measure your progress over a\n        period. And this is the best website available to test your reading\n        score. Paste a sentence or select a topic that you want to read and then\n        press Start.\n        {/* Speed reading is the process of rapidly absorbing the meaning of a\n        context rather than identifying individual words. Speed Reading became\n        so important to gain knowledge in the current scenario. The average\n        reading speed of most adults is around 200 to 250 words per minute. If\n        You cross this range you will have an advantage over others to get\n        knowledge with less time. We provide a free tool to test your reading\n        speed online. Pick a topic or paste a text you want to read. You can\n        choose any fonts with font size, and you can read in a full-screen mode. */}\n        If you spend a lot of time reading a book or a novel, Improving your\n        reading speed will help you to get the information, summary, or\n        knowledge quickly. Sharpening a tool will always help you to achieve\n        more in your work.\n      </p>\n      <Helmet>\n        <title>Reading speed test online</title>\n        <meta\n          name=\"description\"\n          content=\"Calculate your reading speed on readingspeedtest.tech for free online. Measure your progress and increase your reading speed and comprehension.\"\n        />\n      </Helmet>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport interface wpmContextData {\n  wpm: number;\n  setWpm: (arg: number) => void;\n}\n\nexport const wpmContextDefaultValue: wpmContextData = {\n  wpm: 0,\n  setWpm: (arg: number = 0) => null,\n};\n\nconst wpmContext = React.createContext<wpmContextData>(wpmContextDefaultValue);\n\nexport default wpmContext;\n","export const ROOT: string = \"https://sumukhah.github.io/speed-read-json/\";\n\ninterface topics {\n  [key: string]: {\n    api: string;\n    api_key?: string | null;\n  };\n}\n\nexport const availableTopics: topics = {\n  random: { api: ROOT + \"random.json\" },\n  article: { api: ROOT + \"articles.json\" },\n  biography: { api: ROOT + \"biography.json\" },\n  story: { api: ROOT + \"story.json\" },\n};\n\nexport const availableFontFamily: string[] = [\n  \"arial\",\n  \"times new roman\",\n  \"geneva\",\n  \"verdana\",\n];\n","import React from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport { FullscreenOutlined } from \"@ant-design/icons\";\nimport { textStyle } from \"../../helpers/types\";\nimport \"./TextBox.scss\";\n\nconst { TextArea } = Input;\n\ninterface TextBoxProps {\n  fontStyle: textStyle;\n  toggleFullScreen: () => void;\n  toggleReadingMode: () => void;\n  onTextContentChange: (content: string) => void;\n  value: string;\n  readingMode: boolean;\n}\n\nconst TextBox: React.FC<TextBoxProps> = ({\n  fontStyle,\n  toggleFullScreen,\n  readingMode,\n  ...props\n}) => {\n  return (\n    <div className=\"text-box\">\n      {!readingMode ? (\n        <TextArea\n          placeholder=\"Add your own Text or select a Topic and press Start\"\n          style={fontStyle}\n          onChange={({ target: { value } }) => props.onTextContentChange(value)}\n          value={props.value}\n        />\n      ) : (\n        <div style={fontStyle} className=\"textContainerBox\">\n          <p>{props.value}</p>\n          <Button\n            type=\"primary\"\n            className=\"read-toggle-button\"\n            size=\"large\"\n            onClick={props.toggleReadingMode}\n          >\n            Done\n          </Button>\n        </div>\n      )}\n      {!readingMode && (\n        <Button\n          type=\"primary\"\n          className=\"read-toggle-button start-button\"\n          size=\"large\"\n          onClick={props.toggleReadingMode}\n        >\n          Start Test\n        </Button>\n      )}\n      <Tooltip title=\"Full Screen\" className=\"fullscreen-toggle-button\">\n        <Button\n          type=\"text\"\n          icon={<FullscreenOutlined color=\"black\" />}\n          onClick={toggleFullScreen}\n          style={{ backgroundColor: \"white\" }}\n        />\n      </Tooltip>\n    </div>\n  );\n};\n\nexport default TextBox;\n","import React from \"react\";\nimport { Select, Tooltip, Button, InputNumber } from \"antd\";\nimport { BoldOutlined } from \"@ant-design/icons\";\nimport { availableTopics, availableFontFamily } from \"../../helpers\";\nimport S from \"string\";\n\nimport \"./TextFormat.scss\";\nconst { Option } = Select;\n\ninterface TextFormatProps {\n  setFontFamily: (font: string) => void;\n  setFontSize: (size: number) => void;\n  setTopic: (topic: string) => void;\n  setIsBold: () => void;\n  setIsFullScreen: () => void;\n  defaultTopic: string;\n  defaultSize: number;\n  defaultFontFamily: string;\n}\n\nconst TextFormat: React.FC<TextFormatProps> = (props) => {\n  return (\n    <div className=\"text-format-form\">\n      <div>\n        <Select\n          defaultValue={props.defaultFontFamily}\n          className=\"font-select-dropdown\"\n          onChange={(value) => props.setFontFamily(value)}\n        >\n          {availableFontFamily.map((family) => {\n            return (\n              <Option value={family} key={family}>\n                {S(family).humanize().s}\n              </Option>\n            );\n          })}\n        </Select>\n        <InputNumber\n          min={10}\n          max={30}\n          defaultValue={props.defaultSize}\n          className=\"font-size\"\n          onChange={(value) => {\n            props.setFontSize(value as number);\n          }}\n        />\n        <Select\n          defaultValue={props.defaultTopic}\n          className=\"topic-select-dropdown\"\n          onChange={(val) => props.setTopic(val)}\n        >\n          {Object.keys(availableTopics).map((topic) => {\n            return (\n              <Option value={topic} key={topic}>\n                {S(topic).humanize().s}\n              </Option>\n            );\n          })}\n          {/* <Option value=\"Random\">Random</Option>\n          <Option value=\"Articles\">Articles</Option>\n          <Option value=\"News\">News</Option>\n          <Option value=\"Technology\">Technology</Option>\n          <Option value=\"Sports\">Sports</Option>\n          <Option value=\"Bible\">Bible</Option>\n          <Option value=\"Quran\">Quran</Option>\n          <Option value=\"Geetha\">Bhagavath Geetha</Option> */}\n        </Select>\n      </div>\n      <div>\n        <Tooltip title=\"Bold\">\n          <Button\n            onClick={props.setIsBold}\n            // style={{ fontWeight: \"bold\" }}\n            icon={<BoldOutlined />}\n          />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default TextFormat;\n","import React, { useState, useEffect } from \"react\";\n\nimport \"./Timer.scss\";\n\ninterface Props {\n  calculateWpm: (arg: number) => void;\n  readingMode: boolean;\n}\n\nexport default function Timer(props: Props) {\n  const [minutes, setMinutes] = useState<string>(\"00\");\n  const [seconds, setSeconds] = useState<string>(\"00\");\n  const [counter, setCounter] = useState(0);\n\n  const timeIncrease = (): void => {\n    const secondCounter = counter % 60;\n    const minuteCounter = Math.floor(counter / 60);\n\n    const computedSecond =\n      String(secondCounter).length === 1 ? `0${secondCounter}` : secondCounter;\n    const computedMinute =\n      String(minuteCounter).length === 1 ? `0${minuteCounter}` : minuteCounter;\n\n    setSeconds(computedSecond as string);\n    setMinutes(computedMinute as string);\n    setCounter((counter) => counter + 1);\n  };\n\n  useEffect(() => {\n    if (!props.readingMode && counter > 1) {\n      // there is a small lag of 1 second at start.\n      // to make it correct, pass +1 second to the context.\n      props.calculateWpm(counter + 1);\n      setCounter(0);\n    }\n  }, [props.readingMode, counter, props]);\n\n  useEffect(() => {\n    const interval = props.readingMode ? setTimeout(timeIncrease, 1000) : null;\n    return () => {\n      !!interval && clearInterval(interval);\n    };\n  }, [counter, props.readingMode]);\n\n  if (counter === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"timer-container\">\n      <span>\n        {minutes}:{seconds}\n      </span>\n    </div>\n  );\n}\n","import React, { useState, useRef, useContext } from \"react\";\nimport { message } from \"antd\";\nimport axios from \"axios\";\nimport wpmContext from \"../../context/wpmContext\";\nimport { availableTopics } from \"../../helpers/index\";\nimport { useHistory } from \"react-router-dom\";\nimport Helmet from \"react-helmet\";\n\nimport \"./ReadContainer.scss\";\nimport { textStyle } from \"../../helpers/types\";\nimport TextBox from \"../../components/TextBox/TextBox\";\nimport TextFormat from \"../../components/TextFormat/TextFormat\";\nimport Timer from \"../../components/Timer/Timer\";\n\nconst INITIAL_TEXT_FORMAT: textStyle = {\n  fontFamily: \"arial\",\n  fontWeight: \"normal\",\n  fontSize: 15,\n};\n\nexport default function ReadContainer() {\n  const { setWpm } = useContext(wpmContext);\n  const history = useHistory();\n  const [topic, setTopic] = useState<string>(\"random\");\n  const [textContent, setTextContent] = useState<string>(\"\");\n  const [textFormat, setTextFormat] = useState<textStyle>(INITIAL_TEXT_FORMAT);\n  const textBoxRef = useRef<HTMLDivElement | null>(null);\n  const [readingMode, setReadingMode] = useState<boolean>(false);\n\n  const toggleFullScreen = (): void => {\n    if (document.fullscreenEnabled) {\n      if (!document.fullscreenElement) {\n        textBoxRef.current?.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    } else {\n      message.error(\"Full screen mode is not supported in this browser\");\n    }\n  };\n\n  const toggleFontWeight = (): void => {\n    setTextFormat({\n      ...textFormat,\n      fontWeight: textFormat.fontWeight === \"normal\" ? \"bold\" : \"normal\",\n    });\n  };\n\n  const setFontFamily = (family: string): void => {\n    setTextFormat({ ...textFormat, fontFamily: family });\n  };\n\n  const setFontSize = (size: number): void => {\n    setTextFormat({ ...textFormat, fontSize: size });\n  };\n\n  const getTextContent = async () => {\n    if (textContent.trim().length > 0) {\n      if (textContent.split(\" \").length < 60) {\n        message.error(\"You must insert at least 60 words\");\n        return;\n      }\n      setReadingMode(true);\n    } else {\n      const url = availableTopics[topic];\n      try {\n        const response = await axios.get(url.api);\n        const data = response.data.body;\n        const randomArticle: string =\n          data[Math.floor(Math.random() * data.length)].content;\n        setTextContent(randomArticle);\n        setReadingMode(true);\n      } catch (e) {\n        message.error(e.message);\n      }\n    }\n  };\n\n  const toggleReadingMode = () => {\n    if (!readingMode) {\n      getTextContent();\n    } else {\n      setReadingMode((readingMode) => !readingMode);\n    }\n    // setReadingMode(!readingMode);\n  };\n\n  const onTextContentChange = (value: string): void => {\n    setTextContent(value);\n  };\n\n  const calculateWpm = (seconds: number): void => {\n    const words: number = textContent.split(\" \").length;\n    const wpm: number = (60 * words) / seconds;\n    setWpm(Math.floor(wpm));\n    history.push(\"/stats\");\n  };\n\n  return (\n    <div>\n      <div className=\"read-box-container\">\n        <Helmet>\n          <title>Test your reading speed</title>\n          <meta\n            name=\"description\"\n            content=\"Free online tool to check your reading ability. Reading speed is\n          proportional to Comprehension at certain level. Check speed reading\n          wpm.Check your average reading speed.\"\n          />\n        </Helmet>\n        <TextFormat\n          setFontSize={setFontSize}\n          setFontFamily={setFontFamily}\n          setIsBold={toggleFontWeight}\n          setTopic={setTopic}\n          setIsFullScreen={toggleFullScreen}\n          defaultTopic={topic}\n          defaultSize={textFormat.fontSize}\n          defaultFontFamily={textFormat.fontFamily}\n        />\n        <div ref={textBoxRef} className=\"text-box-ref\">\n          <TextBox\n            fontStyle={textFormat}\n            toggleFullScreen={toggleFullScreen}\n            toggleReadingMode={toggleReadingMode}\n            onTextContentChange={onTextContentChange}\n            value={textContent}\n            readingMode={readingMode}\n          />\n          <Timer calculateWpm={calculateWpm} readingMode={readingMode} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Table } from \"antd\";\n\nexport default function ReadMeasurementTable() {\n  const columns = [\n    {\n      title: \"Screen\",\n      dataIndex: \"screen\",\n    },\n    {\n      title: \"Paper\",\n      dataIndex: \"paper\",\n    },\n    {\n      title: \"Character\",\n      dataIndex: \"character\",\n    },\n    {\n      title: \"Profile\",\n      dataIndex: \"profile\",\n    },\n  ];\n  const data = [\n    {\n      key: \"1\",\n      paper: 120,\n      screen: 100,\n      character: \"The Sloth\",\n      profile: \"Slow reader\",\n    },\n    {\n      key: \"2\",\n      paper: 250,\n      screen: 200,\n      character: \"The Fox\",\n      profile: \"Average reader\",\n    },\n    {\n      key: \"3\",\n      paper: 500,\n      screen: 400,\n      character: \"The Lion\",\n      profile: \"Speed reader\",\n    },\n    {\n      key: \"4\",\n      paper: 700,\n      screen: 600,\n      character: \"The Cheetah\",\n      profile: \"The Expert\",\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        // rowSelection={{\n        //   type: selectionType,\n        //   ...rowSelection,\n        // }}\n        pagination={false}\n        columns={columns}\n        dataSource={data}\n        bordered\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Card, Divider, Button } from \"antd\";\nimport { ROOT } from \"../../helpers/index\";\nimport { Progress } from \"antd\";\nimport S from \"string\";\n\nimport \"./ResultDisplay.scss\";\n\ninterface Props {\n  character: string;\n  wpm: number;\n  betterThan: number;\n  readAgain: () => void;\n}\n\nexport default function ResultDisplay(props: Props) {\n  return (\n    <div className=\"result-display-container\">\n      <Card\n        hoverable\n        cover={\n          <img\n            // style={{ width: 200 }}\n            alt=\"example\"\n            src={`${ROOT}/images/` + props.character + `.gif`}\n          />\n        }\n        className=\"result-card\"\n      >\n        <div style={{ display: \"inline\", float: \"left\" }}>\n          <h3>Your speed is</h3>\n          <h1>{props.wpm} WPM</h1>\n        </div>\n\n        <div style={{ display: \"inline\", float: \"right\" }}>\n          <h3>You are a</h3>\n          <h2>{S(props.character).humanize().s}</h2>\n        </div>\n        <Divider />\n        <Button\n          onClick={props.readAgain}\n          type=\"primary\"\n          className=\"read-again-button\"\n        >\n          Read again\n        </Button>\n      </Card>\n      <div className=\"progress-display\">\n        <Progress percent={20} type=\"circle\" />\n        <h3>You are better than {props.betterThan}% of our readers</h3>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./ComprehensionText.scss\";\n\nexport default function ComprehensionText() {\n  return (\n    <div className=\"app-intro-container\">\n      <h1>Reading Speed and Comprehension are proportional</h1>\n      <p>\n        Improving your <Link to=\"/\">reading speed</Link> will help you increase\n        your comprehension ability. Spending time in visualization rather than\n        sub-vocalization makes you remember more things clearly, And this may\n        also increase your interest in the subject.\n      </p>\n    </div>\n  );\n}\n","import React, { useContext } from \"react\";\nimport Helmet from \"react-helmet\";\nimport \"./StatisticsContainer.scss\";\nimport ReadMeasurementTable from \"../../components/ReadMeasurementTable/ReadMeasurementTable\";\nimport ResultDisplay from \"../../components/ResultDisplay/ResultDisplay\";\nimport wpmContext from \"../../context/wpmContext\";\nimport ComprehensionText from \"../../components/ComprehensionText/ComprehensionText\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Card } from \"antd\";\n\nconst switchImage = (wpm: number) => {\n  switch (true) {\n    case wpm <= 120:\n      return { character: \"sloth\", betterThan: 0 };\n    case wpm > 120 && wpm < 250:\n      return { character: \"fox\", betterThan: 20 };\n    case wpm > 250 && wpm < 500:\n      return { character: \"lion\", betterThan: 50 };\n    case wpm > 500:\n      return { character: \"cheetah\", betterThan: 80 };\n    default:\n      return { character: \"fox\", betterThan: 20 };\n  }\n};\n\nexport default function StatisticsContainer() {\n  const { wpm } = useContext(wpmContext);\n  const { character, betterThan } = switchImage(wpm);\n  const history = useHistory();\n\n  const onPressChallengeAgain = () => {\n    history.replace(\"/\");\n  };\n  return (\n    <div className=\"statistics-container\">\n      <Helmet>\n        <title>Speed reading statistics</title>\n        <meta\n          name=\"description\"\n          content=\"Free speed reading online test.Check your reading speed and test your\n          Comprehension.Check your average reading speed. learn to speed read\n          .The average wpm is 150 to 200 wpm.reading wpm test.words per minute\n          reading test.reading wpm test.Check your average reading speed.train\n          yourself with speed reading exercises\"\n        />\n      </Helmet>\n      <div>\n        {wpm > 10 && (\n          <ResultDisplay\n            character={character}\n            wpm={wpm}\n            betterThan={betterThan}\n            readAgain={onPressChallengeAgain}\n          />\n        )}\n      </div>\n      <ComprehensionText />\n      <h2>\n        The following table shows how reading speed and Comprehensions are\n        related\n      </h2>\n      <ReadMeasurementTable />\n      <div className=\"benefits-container\">\n        <h2>Benefits of speed reading</h2>\n        <Card>\n          <b>Read more in less time: </b>\n          <span>\n            It is so obvious that if you increase your reading speed, It will\n            take less time to finish a book.\n          </span>\n        </Card>\n        <Card>\n          <b>Improves Focus: </b>\n          <span>\n            Reading at your top speed challenges your brain to perform at a\n            higher level.\n          </span>\n        </Card>\n        <Card>\n          <b>Improves Comprehension: </b>\n          <span>\n            Spending more time in visualization will improve your focus and\n            retention.\n          </span>\n        </Card>\n        <h4>\n          Test your reading speed <Link to=\"/\">here</Link>\n        </h4>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Modal, Button } from \"antd\";\nimport { StopOutlined } from \"@ant-design/icons\";\n\nexport default function AdblockDetect() {\n  const [adblockDetected, setAdblock] = useState(false);\n  const checkAdblock = async () => {\n    try {\n      const response = await checkAdBlocker();\n      setAdblock(!!response);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    checkAdblock();\n  }, []);\n\n  if (adblockDetected) {\n    return (\n      <Modal\n        title=\"Disable Ad blocker\"\n        visible={adblockDetected}\n        footer={[<Button onClick={checkAdblock}>Refresh</Button>]}\n      >\n        <p>\n          Please consider helping us financially to continue providing this\n          software for free by disabling the adblock.\n        </p>\n        <span>\n          <Button\n            icon={<StopOutlined style={{ color: \"red\" }} />}\n            type=\"text\"\n          />\n          Disable the <b>adblock</b> and hit <b>refresh</b>\n        </span>\n      </Modal>\n    );\n  }\n  return <p></p>;\n}\n\n// Determines if the user is likely using an ad block extension\n\nasync function checkAdBlocker() {\n  let isBlocked;\n  async function tryRequest() {\n    try {\n      return fetch(\n        new Request(\n          \"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js\",\n          {\n            method: \"HEAD\",\n            mode: \"no-cors\",\n          }\n        )\n      )\n        .then(function (response) {\n          // Google Ads request succeeded, so likely no ad blocker\n          isBlocked = false;\n          return isBlocked;\n        })\n        .catch(function (e) {\n          // Request failed, likely due to ad blocker\n          isBlocked = true;\n          return isBlocked;\n        });\n    } catch (error) {\n      isBlocked = true;\n      throw new Error(\"Blocked\");\n    }\n  }\n\n  return isBlocked !== undefined ? isBlocked : await tryRequest();\n}\n","import React, { useEffect } from \"react\";\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default function Ads() {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({});\n  }, []);\n\n  return (\n    <div className=\"ads\">\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: \"block\" }}\n        data-ad-client=\"ca-pub-2722285596392235\"\n        data-ad-slot=\"7149145943\"\n        data-ad-format=\"auto\"\n        data-full-width-responsive=\"true\"\n        // data-adtest=\"on\"\n      ></ins>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\n\ndeclare global {\n  interface Window {\n    adsbygoogle: any;\n  }\n}\n\nexport default function Ads() {\n  useEffect(() => {\n    (window.adsbygoogle = window.adsbygoogle || []).push({});\n  }, []);\n\n  return (\n    <ins\n      className=\"adsbygoogle\"\n      style={{ display: \"block\" }}\n      data-ad-client=\"ca-pub-2722285596392235\"\n      data-ad-slot=\"4706815431\"\n      data-ad-format=\"auto\"\n      data-full-width-responsive=\"true\"\n      data-adtest=\"on\"\n    ></ins>\n  );\n}\n","import React from \"react\";\nimport \"./AppIntroTextBottom.scss\";\nimport { Link } from \"react-router-dom\";\n// import ReadMeasurementTable from \"../ReadMeasurementTable/ReadMeasurementTable\";\n\nexport default function AppIntroTextBottom() {\n  return (\n    <div className=\"app-intro-container\">\n      {/* <h2>How to use this?</h2>\n      <p className=\"intro-p\">\n        Click on start after selecting a topic. Read from top to bottom. You can\n        choose any font family which you prefer, and You can also choose any\n        font size. After you read the entire content and click on Stop. We\n        calculate your speed and display how many words you can read in a\n        minutes. Many resources indicate that the average reading speed of most\n        adults is around 200 to 250 words per minute (WPM).\n      </p> */}\n\n      <p>\n        {\" \"}\n        Learn more about speed reading at <Link to=\"/stats\">statistics</Link>\n      </p>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Row, Col } from \"antd\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ReactGA from \"react-ga\";\n\nimport AppHeader from \"./components/AppHeader/AppHeader\";\nimport Footer from \"./components/Footer/Footer\";\nimport AppIntro from \"./components/AppIntroduction/AppIntroduction\";\nimport ReadContainer from \"./container/ReadContainer/ReadContainer\";\nimport StatisticsContainer from \"./container/StatisticsContainer/StatisticsContainer\";\nimport wpmContext from \"./context/wpmContext\";\nimport AdblockDetect from \"./components/AdblockDetect/AdblockDetect\";\nimport VerticalBannerAd from \"./components/VerticalBannerAds/VerticalBannerAds\";\nimport SquareBannerAd from \"./components/SquareBannerAd/SquareBannerAd\";\n// import GuideContainer from \"./container/GuideContainer/GuideContainer\";\nimport AppIntroTextBottom from \"./components/AppIntroTextBottom/AppIntroTextBottom\";\nimport \"./App.scss\";\n\nfunction App() {\n  const [wpm, setWpm] = useState<number>(0);\n  useEffect(() => {\n    ReactGA.initialize(\"UA-186125804-1\");\n    ReactGA.pageview(window.location.pathname + window.location.search);\n  }, []);\n\n  return (\n    <Router>\n      <AppHeader />\n      <AdblockDetect />\n      <wpmContext.Provider value={{ wpm, setWpm }}>\n        <Switch>\n          <Route path=\"/stats\">\n            <AppBody>\n              <StatisticsContainer />\n            </AppBody>\n          </Route>\n          {/* <Route path=\"/guide\">\n            <AppBody>\n              <GuideContainer />\n            </AppBody>\n          </Route> */}\n          <Route path=\"/\">\n            <AppBody>\n              <AppIntro />\n              <ReadContainer />\n              <AppIntroTextBottom />\n            </AppBody>\n          </Route>\n        </Switch>\n      </wpmContext.Provider>\n      <Footer />\n    </Router>\n  );\n}\n\nconst AppBody = (props: { children: JSX.Element[] | JSX.Element }) => {\n  return (\n    <div className=\"App\">\n      <Row className=\"app-body\">\n        <Col flex={2} style={{ minHeight: \"90vh\" }}>\n          <SquareBannerAd />\n        </Col>\n        <Col flex=\"5 500px\" style={{ minHeight: \"90vh\" }}>\n          {props.children}\n        </Col>\n        <Col flex={2} style={{ minHeight: \"90vh\" }}>\n          <VerticalBannerAd />\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}